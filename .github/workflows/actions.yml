name: Crystal Specs
on: [push, pull_request]
jobs:
  tests:
    name: Fetch Matrix Tests
    runs-on: ubuntu-20.04	
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - id: set-matrix
      run: |
        JSON="{\"include\":["
        TEST_LIST=$(for i in $(find spec -name '*_spec.cr')
        do
            if ! [ "$i" == "spec/cpu_hog_spec.cr" ]; then
                 echo "{\"spec\":\"$i\"}," | tr -d '\n'
            fi
        done)
        TEST_LIST="${TEST_LIST%?}"
        JSON="$JSON$TEST_LIST"
        JSON="$JSON]}"
        echo "::set-output name=matrix::$JSON"
  skip:
    name: Skip Build
    runs-on: ubuntu-20.04	
    outputs:
      skip: ${{ steps.skip.outputs.skip }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - id: skip
      run: |
        echo "::set-output name=skip::$(.github/workflows/skip.sh)"
  spec:
    name: Crystal Specs
    needs: [tests, skip]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.tests.outputs.matrix)}}
    if: needs.skip.outputs.skip == 'false'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Clusterctl
      run: |
        curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v0.3.10/clusterctl-linux-amd64 -o clusterctl
        chmod +x ./clusterctl
        sudo mv ./clusterctl /usr/local/bin/clusterctl
    - name: Install Crystal
      env:
        CRYSTAL_VERSION: 0.35.1
        CRYSTAL_URL: https://github.com/crystal-lang/crystal/releases/download
      run: |
        wget -O crystal.deb "$CRYSTAL_URL/$CRYSTAL_VERSION/crystal_$CRYSTAL_VERSION-1_amd64.deb" --progress=dot:giga; 
        sudo apt install -y --no-install-recommends \
        git \
        libssl-dev \
        libxml2-dev \
        libyaml-dev \
        libgmp-dev \
        libz-dev \
        ./crystal.deb \
        && sudo rm -rf /var/lib/apt/lists/*
    - name: Create Kind Cluster 
      run: |
        kind create cluster
        kubectl get nodes 
    - name: Setup CNF-Conformance
      run: |
        helm repo add stable https://cncf.gitlab.io/stable
        git fetch --all --tags --force
        shards install  
        crystal src/cnf-conformance.cr setup
    - name: Run Crystal Spec
      env:
        GITHUB_USER: ${{ secrets.GH_USER }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        LOG_LEVEL=info crystal spec --warnings none ${{ matrix.spec }} -v

  build:
    name: Build Release
    needs: skip
    runs-on: ubuntu-latest
    if: needs.skip.outputs.skip == 'false'
    steps: 
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Crystal
      env:
        CRYSTAL_VERSION: 0.35.1
        CRYSTAL_URL: https://github.com/crystal-lang/crystal/releases/download
      run: |
        wget -O crystal.deb "$CRYSTAL_URL/$CRYSTAL_VERSION/crystal_$CRYSTAL_VERSION-1_amd64.deb" --progress=dot:giga; 
        sudo apt install -y --no-install-recommends \
        git \
        libssl-dev \
        libxml2-dev \
        libyaml-dev \
        libgmp-dev \
        libz-dev \
        ./crystal.deb \
        && sudo rm -rf /var/lib/apt/lists/*
    - name: Build Release
      run: |
        shards install
        docker pull conformance/crystal:0.35.1
        docker run --rm -v $PWD:/workspace -w /workspace conformance/crystal:0.35.1-llvm10 crystal build --warnings none src/cnf-conformance.cr --release --static --link-flags '-lxml2 -llzma'
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: release
        path: cnf-conformance
  release:
    name: Publish Release
    needs: [spec, build]
    runs-on: ubuntu-latest
    steps: 
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release
    - name: Make release executable
      run: chmod +x ./cnf-conformance
    - name: Publish Release
      env:
        GITHUB_USER: ${{ secrets.GH_USER }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        if [ -z "${GITHUB_USER+x}" ] || [ -z "${GITHUB_TOKEN+x}" ]; then
          exit 0
        else
          ./cnf-conformance upsert_release
        fi

